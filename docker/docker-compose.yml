version: '3.8'

services:
  # Home Assistant ML Predictor Application
  haml-predictor:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: haml-predictor
    restart: unless-stopped
    depends_on:
      - timescaledb
      - mosquitto
    environment:
      - DATABASE_HOST=timescaledb
      - DATABASE_PORT=5432
      - DATABASE_NAME=occupancy_prediction
      - DATABASE_USER=occupancy_user
      - DATABASE_PASSWORD=occupancy_pass
      - MQTT_BROKER=mosquitto
      - MQTT_PORT=1883
      - HA_URL=${HA_URL:-http://192.168.51.247:8123}
      - HA_TOKEN=${HA_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_HOST=0.0.0.0
      - API_PORT=8000
    ports:
      - "8000:8000"  # API server
    volumes:
      - haml_logs:/app/logs
      - haml_models:/app/models
      - haml_data:/app/data
      - ./config:/app/config:ro
    networks:
      - haml_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # TimescaleDB for time-series data storage
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: haml-timescaledb
    restart: unless-stopped
    environment:
      - POSTGRES_DB=occupancy_prediction
      - POSTGRES_USER=occupancy_user
      - POSTGRES_PASSWORD=occupancy_pass
      - POSTGRES_HOST_AUTH_METHOD=trust
      - TIMESCALEDB_TELEMETRY=off
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - haml_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U occupancy_user -d occupancy_prediction"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # MQTT Broker for Home Assistant integration
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: haml-mosquitto
    restart: unless-stopped
    ports:
      - "1883:1883"
      - "9001:9001"  # WebSocket
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
    networks:
      - haml_network
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m 'health check' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Redis for caching and session management (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: haml-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - haml_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Prometheus for metrics collection (optional monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: haml-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - haml_network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Grafana for visualization (optional monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: haml-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - haml_network
    profiles:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

networks:
  haml_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Application volumes
  haml_logs:
    driver: local
  haml_models:
    driver: local
  haml_data:
    driver: local
  
  # Database volumes
  timescale_data:
    driver: local
  
  # MQTT volumes
  mosquitto_data:
    driver: local
  mosquitto_logs:
    driver: local
  
  # Cache volumes
  redis_data:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local